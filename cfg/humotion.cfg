#!/usr/bin/env python
import re
PACKAGE = "humotion"
from dynamic_reconfigure.parameter_generator_catkin import *

def fetch_default(param_name):
    for line in open("../src/server/config.cpp"):
        if param_name in line:
            result = re.findall("=\s*([\d\w.]+);", line)
            print result
            if result:
                return result[0]
            else:
                print("ERROR: could not find parameter %s in config.cpp" % (param_name))
                sys.exit(1)

def add_entry(group, param_name, descr, min, max):
    default_str = fetch_default(param_name)
    default_val = float(default_str)
    if (default_val > max):
        print("ERROR: default value %f for %s exceeds max value (%f)" % (default_val, param_name, max))
        sys.exit(1)
    if (default_val < min):
        print("ERROR: default value %f for %s is under min value (%f)" % (default_val, param_name, min))
        sys.exit(1)

    group.add(param_name, double_t, 0, descr, default_val, min, max)

def add_entry_bool(group, param_name, descr):
    default = fetch_default(param_name)

    default_val = True
    if (default == "false"):
        default_val = False

    group.add(param_name, bool_t, 0, descr, default_val)


gen = ParameterGenerator()

debug_group = gen.add_group("debug")
add_entry_bool(debug_group, "publish_internals", "publish debugging data on different topics")

general_group = gen.add_group("thresholds")
add_entry(general_group, "threshold_velocity_eye_saccade", "velocity threshold for eye saccade detection (in deg/s)", 1.0, 30.0)
add_entry(general_group, "threshold_angle_neck_saccade", "magnitude of gaze change that triggers neck saccade (in deg)", 1.0, 30.0)
add_entry(general_group, "threshold_angle_omr_limit", "threshold for a deflection that triggers a correction neck saccade (in percent of OMR)", 0.1, 1.0)

neck_group = gen.add_group("neck")
add_entry(neck_group, "scale_velocity_neck", "scaling factor for neck velocity (in percent, 1.0 = full human velocities)", 0.1, 1.0)
add_entry(neck_group, "scale_acceleration_neck", "scaling factor for neck acceleration (in percent, 1.0 = full human acceleration)", 0.1, 1.0)
add_entry(neck_group, "limit_velocity_neck", "limit for neck velocity (in deg/s)", 100.0, 800.0)
add_entry(neck_group, "limit_acceleration_neck", "limit for neck acceleration (in deg/s^2)", 100.0, 10000.0)

eye_group = gen.add_group("eye")
add_entry(eye_group, "scale_velocity_eye", "scaling factor for eye velocity (in percent, 1.0 = full human velocities)",  0.1, 1.0)
add_entry(eye_group, "scale_acceleration_eye", "scaling factor for eye acceleration (in percent, 1.0 = full human acceleration)", 0.1, 1.0)
add_entry(eye_group, "limit_velocity_eye", "limit for eye velocity (in deg/s)", 100.0, 1000.0)
add_entry(eye_group, "limit_acceleration_eye", "limit for eye acceleration (in deg/s^2)", 100.0, 80000.0)
add_entry_bool(eye_group, "use_neck_target_instead_of_position_eye", "use neck target in difference calc instead of real position")


eyeblink_group = gen.add_group("eyeblink")
add_entry(eyeblink_group, "eyeblink_duration", "duration for an eyeblink (in seconds)", 0.01, 1.0)
add_entry(eyeblink_group, "eyeblink_periodic_distribution_lower", "lower bound for probalistic eyeblink distribution (in seconds)", 0.1, 100.0)
add_entry(eyeblink_group, "eyeblink_periodic_distribution_upper", "upper bound for probalistic eyeblink distribution (in seconds)", 0.1, 100.0)
add_entry(eyeblink_group, "eyeblink_probability_after_saccade", "probability for an eyeblink after a saccade (in percent)", 0.01, 1.0)
add_entry(eyeblink_group, "eyeblink_blocked_time", "blocking time for further eyeblinks (in seconds)", 0.1, 100.0)

eyelids_group = gen.add_group("eyelids")
add_entry_bool(eyelids_group, "eyelids_follow_eyemotion", "should the eyelids follow the eye tilt motion?")

breath_group = gen.add_group("breath")
add_entry(breath_group, "breath_period", "duration for a full breath periond: inhale, pause and exhale (in seconds)", 1.0, 100.0)
add_entry(breath_group, "breath_amplitude", "amplitude for breath animation (in deg)", 0.0, 10.0)

exit(gen.generate(PACKAGE, "humotion", "humotion"))

